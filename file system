---
( ЦІЛЬ  )
## 🗂️ Структура Репозиторію QuantumForce_Code (v0.1 MVP)

> Формат — дерево директорій і файлів. Пояснення додаються простими словами під розділами.
> Позначення:
>
> * 📁 — папка
> * 📄 — файл
> * 🤖 — промпти / конфігурації для AI агентів
> * 🧩 — код або модуль
> * 🧠 — документація
> * ⚙️ — CI / DevContainer / інфраструктура

---

```plaintext
QuantumForce_Code/
│
├── 📄 README.md
├── 📄 LICENSE
├── 📄 .gitignore
├── 📄 .gitattributes
│
├── 📁 .github/
│   ├── 📁 workflows/
│   │   ├── 📄 android-ci.yml          # CI: лінти, тести, збірка
│   │   ├── 📄 pr-lint-check.yml       # Легкий workflow на PR
│   │   └── 📄 release.yml             # Автоматизація релізів (пізніше)
│   ├── 📄 CODEOWNERS                  # Призначення AI-агентів за модулями
│   ├── 📄 pull_request_template.md    # Шаблон PR
│   └── 📄 issue_template.md           # Шаблон issue (опціонально)
│
├── 📁 .devcontainer/
│   ├── 📄 devcontainer.json           # Конфігурація Codespaces
│   ├── 📄 Dockerfile                  # Середовище Android SDK + JDK 17
│   └── 📄 postCreate.sh               # Скрипт ініціалізації (ktlint, detekt)
│
├── 📁 build-logic/                    # Gradle плагіни і логіка збірки (опц.)
│   ├── 📄 build.gradle.kts
│   ├── 📄 settings.gradle.kts
│   └── 📄 conventions.gradle.kts
│
├── 📁 gradle/                         # Gradle інфраструктура
│   ├── 📄 libs.versions.toml          # Каталог версій
│   └── 📄 wrapper/
│       ├── 📄 gradle-wrapper.properties
│       └── 📄 gradle-wrapper.jar
│
├── 📄 settings.gradle.kts             # Основний реєстр модулів
├── 📄 build.gradle.kts                # Root build з плагінами/налаштуваннями
│
│
├── 🧩 app/                            # Головний застосунок (UI)
│   ├── 📄 build.gradle.kts
│   ├── 📁 src/
│   │   ├── 📁 main/
│   │   │   ├── 📁 java/com/quantumforce_code/app/
│   │   │   │   ├── 📄 MainActivity.kt
│   │   │   │   ├── 📄 App.kt
│   │   │   │   ├── 📁 ui/
│   │   │   │   │   ├── 📁 screens/
│   │   │   │   │   │   ├── 📄 DashboardScreen.kt
│   │   │   │   │   │   ├── 📄 DtcScreen.kt
│   │   │   │   │   │   └── 📄 LiveScreen.kt
│   │   │   │   │   └── 📁 components/
│   │   │   │   │       └── 📄 CommonUi.kt
│   │   │   │   └── 📁 navigation/
│   │   │   │       └── 📄 NavGraph.kt
│   │   │   ├── 📁 res/                 # ресурси (іконки, строки)
│   │   │   └── 📄 AndroidManifest.xml
│   │   └── 📁 test/                   # Тести для UI
│   │       └── 📄 AppUiTest.kt
│   └── 📁 docs/
│       └── 📄 ui-agent-guidelines.md
│
│
├── 🧩 core/
│   ├── 📁 domain/                     # Бізнес-логіка (UseCases, Models)
│   │   ├── 📄 build.gradle.kts
│   │   └── 📁 src/main/kotlin/com/quantumforce_code/core/domain/
│   │       ├── 📄 UseCase.kt
│   │       ├── 📄 Vehicle.kt
│   │       ├── 📄 DtcCode.kt
│   │       └── 📄 DiagnosticSession.kt
│   │
│   ├── 📁 data/                       # Room, репозиторії, DAO
│   │   ├── 📄 build.gradle.kts
│   │   └── 📁 src/main/kotlin/com/quantumforce_code/core/data/
│   │       ├── 📁 db/
│   │       │   ├── 📄 AppDatabase.kt
│   │       │   └── 📄 DtcDao.kt
│   │       ├── 📁 repo/
│   │       │   ├── 📄 DtcRepository.kt
│   │       │   └── 📄 VehicleRepository.kt
│   │       └── 📄 DataMappers.kt
│   │
│   └── 📁 test/
│       └── 📄 DataUnitTests.kt
│
│
├── 🧩 hardware/
│   └── 📁 transport/
│       ├── 📄 build.gradle.kts
│       └── 📁 src/main/kotlin/com/quantumforce_code/hardware/transport/
│           ├── 📄 Port.kt
│           ├── 📄 BluetoothPort.kt
│           ├── 📄 TcpPort.kt
│           ├── 📄 UsbSerialPort.kt
│           └── 📄 ConnectionManager.kt
│
│
├── 🧩 protocols/
│   └── 📁 obd/
│       ├── 📄 build.gradle.kts
│       └── 📁 src/main/kotlin/com/quantumforce_code/protocols/obd/
│           ├── 📄 ObdInterface.kt
│           ├── 📄 Elm327.kt
│           ├── 📄 ObdCommand.kt
│           ├── 📄 PidParser.kt
│           └── 📄 DtcParser.kt
│
│
├── 🧩 features/
│   ├── 📁 dtc/
│   │   ├── 📄 build.gradle.kts
│   │   └── 📁 src/main/kotlin/com/quantumforce_code/features/dtc/
│   │       ├── 📄 DtcViewModel.kt
│   │       ├── 📄 DtcScreenModel.kt
│   │       ├── 📄 DtcUiState.kt
│   │       └── 📄 DtcRepositoryBridge.kt
│   │
│   └── 📁 live/
│       ├── 📄 build.gradle.kts
│       └── 📁 src/main/kotlin/com/quantumforce_code/features/live/
│           ├── 📄 LiveDataViewModel.kt
│           ├── 📄 LiveChartRenderer.kt
│           └── 📄 LiveRepositoryBridge.kt
│
│
├── 🧩 security/
│   ├── 📄 build.gradle.kts
│   └── 📁 src/main/kotlin/com/quantumforce_code/security/
│       ├── 📄 ThreatModel.md
│       ├── 📄 SecurityPolicy.kt
│       └── 📄 LoggerPolicy.kt
│
│
├── 🧩 updates/
│   ├── 📄 build.gradle.kts
│   └── 📁 src/main/kotlin/com/quantumforce_code/updates/
│       ├── 📄 ManifestClient.kt
│       ├── 📄 DataVersion.kt
│       ├── 📄 UpdateChecker.kt
│       └── 📄 UpdateRepository.kt
│
│
├── 🧠 docs/
│   ├── 📄 architecture.md
│   ├── 📄 roadmap.md
│   ├── 📄 adr/adr-001-initial-architecture.md
│   ├── 📄 AI_AGENT_ROLE.md
│   ├── 📄 SECURITY_POLICY.md
│   ├── 📄 CONTRIBUTING.md
│   └── 📄 testing-guidelines.md
│
│
├── 🤖 prompts/
│   ├── 📄 README.md                     # Пояснення системи промптів
│   ├── 📄 ui-agent-start.md
│   ├── 📄 data-agent-start.md
│   ├── 📄 protocols-agent-start.md
│   ├── 📄 transport-agent-start.md
│   ├── 📄 feature-dtc-start.md
│   ├── 📄 feature-live-start.md
│   ├── 📄 security-review.md
│   ├── 📄 review-common.md
│   └── 📄 build-agent.md
│
│
├── ⚙️ scripts/
│   ├── 📄 verify-local.sh               # локальна перевірка перед PR
│   ├── 📄 format-code.sh                # форматування KtLint
│   ├── 📄 run-tests.sh
│   └── 📄 setup-env.sh
│
│
└── ⚙️ tests/
    ├── 📄 integration-test-plan.md
    ├── 📄 unit-tests-report.md
    └── 📄 ui-tests-report.md
```

---

## 🧭 Детальні Описи Кожного Модуля, Папки та Файла

Тут надано зрозумілі, детальні описи для кожного елемента структури. Описи пояснюють призначення, роль у проєкті та взаємозв'язки. Структура побудована за принципом чистої архітектури з чітким розділенням відповідальностей.

### 🔝 Кореневі Файли (Root Files)
- **📄 README.md**: Головний файл проєкту з візією, інструкціями встановлення, архітектурою та прикладами використання. Для нових розробників — перше, що читають.
- **📄 LICENSE**: Ліцензія проєкту (наприклад, MIT або Apache 2.0), визначає права на використання коду.
- **📄 .gitignore**: Список файлів/папок, які Git ігнорує (кеш, логи, секретні файли). Забезпечує чистоту репозиторію.
- **📄 .gitattributes**: Налаштування Git для обробки файлів (наприклад, нормалізація рядків для крос-платформності).

### ⚙️ Інфраструктура та CI/CD (.github/, .devcontainer/)
- **📁 .github/**: Інтеграція з GitHub для автоматизації.
  - **📁 workflows/**: CI/CD пайплайни.
    - **📄 android-ci.yml**: Повний CI для Android — лінтинг (ktlint, detekt), unit/інтеграційні тести, збірка APK/AAB.
    - **📄 pr-lint-check.yml**: Швидка перевірка PR на стиль коду та базові помилки.
    - **📄 release.yml**: Автоматизація релізів — тегування, збірка, публікація в Play Store або GitHub Releases.
  - **📄 CODEOWNERS**: Призначення відповідальних за модулі (наприклад, AI-агенти за features/).
  - **📄 pull_request_template.md**: Шаблон для PR — структура опису змін, тестів, скріншотів.
  - **📄 issue_template.md**: Шаблони для багів/фіч — стандартизація звітів.
- **📁 .devcontainer/**: Конфігурація GitHub Codespaces для ідентичного середовища.
  - **📄 devcontainer.json**: Налаштування контейнера — JDK 17, Android SDK, extensions (Kotlin, Gradle).
  - **📄 Dockerfile**: Базовий образ з Ubuntu + Android tools, забезпечує відтворюваність.
  - **📄 postCreate.sh**: Скрипт після створення — встановлення ktlint, detekt, ініціалізація Gradle.

### 🛠️ Збірка та Конфігурація (build-logic/, gradle/, settings.gradle.kts, build.gradle.kts)
- **📁 build-logic/**: Кастомні Gradle плагіни для повторюваної логіки збірки (опціонально для складних проєктів).
  - **📄 build.gradle.kts**: Конфігурація плагіна.
  - **📄 settings.gradle.kts**: Реєстр підмодулів у build-logic.
  - **📄 conventions.gradle.kts**: Спільні правила (версії, плагіни) для всіх модулів.
- **📁 gradle/**: Інструменти Gradle.
  - **📄 libs.versions.toml**: Централізований каталог версій залежностей (Kotlin, Compose, Hilt тощо) — для консистентності.
  - **📁 wrapper/**: Wrapper для запуску Gradle без встановлення.
    - **📄 gradle-wrapper.properties**: Версія Gradle (8.x для сумісності з JDK 17).
    - **📄 gradle-wrapper.jar**: Бінарний wrapper.
- **📄 settings.gradle.kts**: Головний реєстр всіх модулів проєкту (app, core, features тощо) — Gradle знає, що збирати.
- **📄 build.gradle.kts**: Коренева конфігурація — плагіни (Android, Kotlin), залежності, завдання (clean, build).

### 🧩 Основні Модулі (app/, core/)
- **🧩 app/**: Головний Android-модуль — збирається в APK. Містить UI та інтеграцію всіх компонентів.
  - **📄 build.gradle.kts**: Залежності (Compose, Hilt, Navigation), конфігурація Android (minSdk 26, targetSdk 35).
  - **📁 src/main/**: Основний код.
    - **📁 java/com/quantumforce_code/app/**: (Примітка: для Kotlin файлів використовується java/ за конвенцією Android).
      - **📄 MainActivity.kt**: Точка входу — запускає Compose UI.
      - **📄 App.kt**: Application клас з Hilt ініціалізацією.
      - **📁 ui/**: Інтерфейс.
        - **📁 screens/**: Екрани (Compose @Composable).
          - **📄 DashboardScreen.kt**: Головний екран з меню.
          - **📄 DtcScreen.kt**: Екран DTC-кодів.
          - **📄 LiveScreen.kt**: Екран live-даних.
        - **📁 components/**: Перевикористовувані UI-компоненти.
          - **📄 CommonUi.kt**: Кнопки, поля тощо.
      - **📁 navigation/**: Навігація між екранами.
        - **📄 NavGraph.kt**: Граф маршрутів (NavController).
    - **📁 res/**: Ресурси — strings.xml, colors.xml, іконки.
    - **📄 AndroidManifest.xml**: Маніфест — дозволи (Bluetooth, USB), активності.
  - **📁 src/test/**: UI-тести (Compose Testing).
    - **📄 AppUiTest.kt**: Тести навігації, UI-станів.
  - **📁 docs/**: Документація модуля.
    - **📄 ui-agent-guidelines.md**: Правила для UI-агентів (Compose патерни, accessibility).
- **🧩 core/**: Основа — бізнес-логіка та дані, незалежна від Android.
  - **📁 domain/**: Бізнес-логіка (чистої архітектури).
    - **📄 build.gradle.kts**: Мінімальні залежності (Kotlin stdlib).
    - **📁 src/main/kotlin/com/quantumforce_code/core/domain/**: Моделі та Use Cases.
      - **📄 UseCase.kt**: Базовий клас для бізнес-операцій (execute з параметрами).
      - **📄 Vehicle.kt**: Модель авто (VIN, make, model).
      - **📄 DtcCode.kt**: Модель DTC (код, опис, причини).
      - **📄 DiagnosticSession.kt**: Сесія діагностики (історія, статус).
  - **📁 data/**: Шар даних — Room, репозиторії.
    - **📄 build.gradle.kts**: Залежності (Room, Coroutines).
    - **📁 src/main/kotlin/com/quantumforce_code/core/data/**: DAO та мапери.
      - **📁 db/**: База даних.
        - **📄 AppDatabase.kt**: Room Database клас.
        - **📄 DtcDao.kt**: Інтерфейс для запитів DTC.
      - **📁 repo/**: Репозиторії — абстракція даних.
        - **📄 DtcRepository.kt**: Доступ до DTC.
        - **📄 VehicleRepository.kt**: Доступ до авто.
      - **📄 DataMappers.kt**: Перетворення між DB-моделями та domain.
  - **📁 test/**: Unit-тести для core.
    - **📄 DataUnitTests.kt**: Тести маперів, репозиторіїв.

### 🧩 Спеціалізовані Модулі (hardware/, protocols/, features/, security/, updates/)
- **🧩 hardware/**: Фізичні інтерфейси — підключення до OBD-адаптерів.
  - **📁 transport/**: Транспортний шар.
    - **📄 build.gradle.kts**: Залежності (USB Serial library).
    - **📁 src/main/kotlin/com/quantumforce_code/hardware/transport/**: Класи підключення.
      - **📄 Port.kt**: Інтерфейс порту (open, write, read).
      - **📄 BluetoothPort.kt**: Реалізація Bluetooth (RFCOMM).
      - **📄 TcpPort.kt**: Реалізація Wi-Fi/TCP.
      - **📄 UsbSerialPort.kt**: Реалізація USB (ELM327).
      - **📄 ConnectionManager.kt**: Менеджер з'єднань (автоматичний вибір порту).
- **🧩 protocols/**: Протоколи діагностики — розбір OBD-даних.
  - **📁 obd/**: OBD-II стандарти.
    - **📄 build.gradle.kts**: Залежності (Kotlin stdlib).
    - **📁 src/main/kotlin/com/quantumforce_code/protocols/obd/**: Парсери.
      - **📄 ObdInterface.kt**: Інтерфейс для команд OBD.
      - **📄 Elm327.kt**: Ініціалізація ELM327-адаптера.
      - **📄 ObdCommand.kt**: Модель команди (PID, raw data).
      - **📄 PidParser.kt**: Парсер PID-відповідей (температура, швидкість).
      - **📄 DtcParser.kt**: Парсер DTC-кодів.
- **🧩 features/**: Функціональні модулі — UI-логіка для фіч.
  - **📁 dtc/**: DTC-діагностика.
    - **📄 build.gradle.kts**: Залежності (ViewModel, Compose).
    - **📁 src/main/kotlin/com/quantumforce_code/features/dtc/**: ViewModel та моделі.
      - **📄 DtcViewModel.kt**: Логіка UI для DTC.
      - **📄 DtcScreenModel.kt**: Стан екрана.
      - **📄 DtcUiState.kt**: UI-стан (loading, data, error).
      - **📄 DtcRepositoryBridge.kt**: Міст до core/data.
  - **📁 live/**: Live-моніторинг.
    - **📄 build.gradle.kts**: Залежності (Compose Charts).
    - **📁 src/main/kotlin/com/quantumforce_code/features/live/**: Компоненти.
      - **📄 LiveDataViewModel.kt**: Стрімінг даних.
      - **📄 LiveChartRenderer.kt**: Рендеринг графіків.
      - **📄 LiveRepositoryBridge.kt**: Доступ до даних.
- **🧩 security/**: Безпека — захист даних та комунікацій.
  - **📄 build.gradle.kts**: Мінімальні залежності.
  - **📁 src/main/kotlin/com/quantumforce_code/security/**: Політики.
    - **📄 ThreatModel.md**: Аналіз загроз (Markdown для документації).
    - **📄 SecurityPolicy.kt**: Правила шифрування, логування.
    - **📄 LoggerPolicy.kt**: Контроль чутливих логів.
- **🧩 updates/**: Оновлення — перевірка та завантаження нових даних.
  - **📄 build.gradle.kts**: Залежності (Retrofit для API).
  - **📁 src/main/kotlin/com/quantumforce_code/updates/**: Логіка оновлень.
    - **📄 ManifestClient.kt**: Клієнт для маніфесту оновлень.
    - **📄 DataVersion.kt**: Модель версій даних.
    - **📄 UpdateChecker.kt**: Перевірка наявності оновлень.
    - **📄 UpdateRepository.kt**: Репозиторій для оновлень.

### 🧠 Документація (docs/)
- **📄 architecture.md**: Загальна архітектура (діаграми, модулі).
- **📄 roadmap.md**: План розвитку (MVP, фічі, дедлайни).
- **📁 adr/**: Architectural Decision Records.
  - **📄 adr-001-initial-architecture.md**: Рішення про clean arch.
- **📄 AI_AGENT_ROLE.md**: Ролі AI-агентів у розробці.
- **📄 SECURITY_POLICY.md**: Політика безпеки.
- **📄 CONTRIBUTING.md**: Правила внеску (Git flow, код-стиль).
- **📄 testing-guidelines.md**: Як писати тести (unit, integration).

### 🤖 Промпти для AI (prompts/)
- **📄 README.md**: Огляд системи промптів.
- **📄 ui-agent-start.md**: Початковий промпт для UI-агента.
- **📄 data-agent-start.md**: Для data-агента.
- **📄 protocols-agent-start.md**: Для протоколів.
- **📄 transport-agent-start.md**: Для транспорту.
- **📄 feature-dtc-start.md**: Для DTC-фічі.
- **📄 feature-live-start.md**: Для live-фічі.
- **📄 security-review.md**: Рев'ю безпеки.
- **📄 review-common.md**: Загальні правила рев'ю.
- **📄 build-agent.md**: Для збірки.

### ⚙️ Скрипти та Тести (scripts/, tests/)
- **⚙️ scripts/**: Автоматизація.
  - **📄 verify-local.sh**: Локальна перевірка (lint, tests) перед PR.
  - **📄 format-code.sh**: Форматування з KtLint.
  - **📄 run-tests.sh**: Запуск всіх тестів.
  - **📄 setup-env.sh**: Налаштування середовища (SDK, tools).
- **⚙️ tests/**: Плани та звіти тестів.
  - **📄 integration-test-plan.md**: План інтеграційних тестів.
  - **📄 unit-tests-report.md**: Звіт unit-тестів.
  - **📄 ui-tests-report.md**: Звіт UI-тестів.

---

## 🧭 Пояснення логіки дерева

* **`app/`** — головний Android-модуль, де збирається інтерфейс (Compose + Navigation + Hilt).
* **`core/`** — основа бізнес-логіки (Domain + Data).
* **`hardware/transport/`** — фізичні канали (Bluetooth/Wi-Fi/USB).
* **`protocols/obd/`** — рівень протоколів (ELM327, PID, DTC).
* **`features/`** — окремі функціональні блоки (читання DTC, Live Data).
* **`security/` і `updates/`** — системні модулі безпеки і оновлень.
* **`docs/`** — вся текстова документація проєкту, включно з AI-рольовими документами.
* **`prompts/`** — готові шаблони запитів для агентів.
* **`scripts/`** — допоміжні скрипти для автоматизації перевірок і форматування.
* **`.github/` і `.devcontainer/`** — CI та середовище Codespaces.

---
